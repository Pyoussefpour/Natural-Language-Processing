from sklearn.model_selection import train_test_split
import numpy as np
import os, fnmatch
import random
import scipy

dataDir = "/u/cs401/A3/data/"


class theta:
    def __init__(self, name, M=8, d=13):
        """
        Class holding model parameters.
        Use the `reset_parameter` functions below to
        initialize and update model parameters during training.
        """
        self.name = name
        self._M = M
        self._d = d
        self.omega = np.zeros((M, 1))
        self.mu = np.zeros((M, d))
        self.Sigma = np.zeros((M, d))

    def precomputedForM(self, m):
        """
        Put the precomputedforM for given `m` computation here
        This is a function of `self.mu` and `self.Sigma`
        This should output a float or equivalent (array of size [1] etc.)
        NOTE: use this in `log_b_m_x` below
        """
        term_2_sum = np.sum(self.mu[m]**2/(2*self.Sigma[m]))
        term_2_mul = np.prod(self.Sigma[m])
        term_2 = term_2_sum + self._d/2 * np.log(2 * np.pi) + 0.5 * np.log(term_2_mul)

        return term_2

    def reset_omega(self, omega):
        """
        Resets omega.

        Parameters
        ----------
        omega : probability of an observation generated by certain component,
                should be of shape [M, 1] or [M]

        Returns
        -------
        N/A, resets self.omega to given omega
        """
        omega = np.asarray(omega)
        assert omega.size == self._M, "`omega` must contain M elements"
        self.omega = omega.reshape(self._M, 1)

    def reset_mu(self, mu):
        """
        Resets mu.

        Parameters
        ----------
        mu : mean for the M components,
             should be of shape [M, d]

        Returns
        -------
        N/A, resets self.mu to given mu
        """
        mu = np.asarray(mu)
        shape = mu.shape
        assert shape == (self._M, self._d), "`mu` must be of size (M,d)"
        self.mu = mu

    def reset_Sigma(self, Sigma):
        """
        Resets sigma.

        Parameters
        ----------
        Sigma : covariance for the M components,
                should be of shape [M, d]

        Returns
        -------
        N/A, resets self.Sigma to given Sigma
        """
        Sigma = np.asarray(Sigma)
        shape = Sigma.shape
        assert shape == (self._M, self._d), "`Sigma` must be of size (M,d)"
        self.Sigma = Sigma

    
def log_b_m_x(x, myTheta, m=None):
    """
    Returns the log probability of d-dimensional vector x using only
        component m of model myTheta (See equation 1 of the handout)

    As you'll see in tutorial, for efficiency, you can precompute
    something for 'm' that applies to all x outside of this function.
    Use `myTheta.preComputedForM(m)` for this.

    **IMPORTANT**: Return shape:
        (single row for specific m): if x.shape == [d] and m is not None, then
            return value is float (or equivalent)
        (single row for all m): if x.shape == [d] and m is None, then
            return shape is [M]
        (vectorized for all M) if x.shape == [T, d] and m is None, then
            return shape is [M, T]

    You should write your code such that it works for both types of inputs.
    But we encourage you to use the vectorized version in your `train`
    function for faster/efficient computation.

    Parameters
    ----------
    x : data, could either be a single vector of dimension d or a pack of T vectors
        which makes it of dimension [T, d]
    myTheta : parameters of class theta that we defined
    m : index of Gaussian, if m = None, you should handle it for all m in M

    Returns
    -------
    log_bmx : log probability of d-dimensional vector x (See equation 1 of the handout)
    """
    d = x.shape[-1]
    mu = myTheta.mu
    sigma = myTheta.Sigma
    

    def single_log_bmx(X,m_single):
        term_2 = myTheta.precomputedForM(m_single)
        term_1 = np.sum(0.5* (X**2) * (sigma[m_single]**(-1))- mu[m_single] * X * (sigma[m_single]**(-1)),axis = -1)
        
        result = -1 * term_1 - term_2
        return result
    
    # Single Row for specific m (log_bmx in [1])
    if len(x.shape) == 1 and m != None:
        log_bmx = single_log_bmx(x,m)

    # Single Row for all m (log_bmx in [M])
    elif len(x.shape) == 1:
        log_bmx = np.zeros((M))
        for m in M:
            log_bmx[m] = single_log_bmx(x,m)

    # Vectorized (log_bmx in [M, T])  
    else:
        T = x.shape[0]
        log_bmx = np.zeros((M,T))
        for m in range(M):
            log_bmx[m] = single_log_bmx(x,m)

    return log_bmx

def log_p_m_x(log_Bs, myTheta):
    """
    Returns the matrix of log probabilities i.e. log of p(m|X;theta)

    Specifically, each entry (m, t) in the output is the
        log probability of p(m|x_t; theta)

    For further information, See equation 2 of handout

    Return shape:
        same as log_Bs, np.ndarray of shape [M, T]

    NOTE: Log_Bs should be the vectorized version of log_bmx above

    Parameters
    ----------
    log_Bs : log probability of d-dimensional vector x (See equation 1 of the handout)
    myTheta : parameters of class theta that we defined

    Returns
    -------
    log_Ps : the matrix of log probabilities i.e. log of p(m|X;theta)
    """
    omega = myTheta.omega                                    
    log_pmx = np.zeros((log_Bs.shape))

    num = np.log(omega) + log_Bs 
    denum = scipy.special.logsumexp(log_Bs, axis = 0, b = omega)

    log_pmx = num - denum

    return log_pmx


def logLik(log_Bs, myTheta):
    """
    Return the log likelihood of 'X' using model 'myTheta' and precomputed MxT matrix, 'log_Bs', of log_b_m_x

    X can be training data, when used in train( ... ), and
    X can be testing data, when used in test( ... ).

    We don't actually pass X directly to the function because we instead pass:

    log_Bs(m,t) is the log probability of vector x_t in component m, which is computed and stored outside of this function for efficiency.

    See equation 3 of the handout

    Parameters
    ----------
    log_Bs : log probability of d-dimensional vector x (See equation 1 of the handout)
    myTheta : parameters of class theta that we defined

    Returns
    -------
    log_Lik : the log likelihood (See equation 3 of the handout)
    """
    omega = myTheta.omega

    result = np.sum(scipy.special.logsumexp(log_Bs, axis = 0, b = omega))
    return result


def train(speaker, X, M=8, epsilon=0.0, maxIter=20):
    """ Train a model for the given speaker. Returns the theta (omega, mu, sigma)"""
    myTheta = theta(speaker, M, X.shape[1])
    # perform initialization (Slide 32)
    T , d = X.shape
 
    myTheta.reset_omega(np.full((M,1),1/M))
    myTheta.reset_mu(X[np.random.choice(T, M)])
    myTheta.reset_Sigma(np.ones((M,d)))


    i = 0
    prev_L = float("-inf")
    improv = float("inf")

    while i <= maxIter and improv >= epsilon:
        #Compute inter result
        log_Bs = log_b_m_x(X,myTheta)
        log_pmx = log_p_m_x(log_Bs, myTheta)

        #log like
        L = logLik(log_Bs, myTheta)

        #update
        sum_p_m_x = np.sum(np.exp(log_pmx), axis = 1,keepdims=True)
        omega = sum_p_m_x/T
        mu = np.dot(np.exp(log_pmx),X)/sum_p_m_x
        sigma = np.subtract((np.dot(np.exp(log_pmx),np.square(X))/sum_p_m_x), np.square(mu))

        myTheta.reset_omega(omega)
        myTheta.reset_mu(mu)
        myTheta.reset_Sigma(sigma)
        

        improv = L - prev_L
        prev_L = L
        i += 1

    return myTheta


def test(mfcc, correctID, models, k=5):
    """
    Computes the likelihood of 'mfcc' in each model in 'models', where the correct model is 'correctID'

    If k>0, print to stdout the actual speaker and the k best likelihoods in this format:
               [ACTUAL_ID]
               [SNAME1] [LOGLIK1]
               [SNAME2] [LOGLIK2]
               ...
               [SNAMEK] [LOGLIKK]

    e.g.,
               S-5A -9.21034037197
    the format of the log likelihood (number of decimal places, or exponent) does not matter
    """
    bestModel = -1
    L_like = np.zeros(len(models))

    for i in range(len(models)):
        log_Bs = log_b_m_x(mfcc, models[i])
        L_like[i] = logLik(log_Bs, models[i])

    bestModel = np.argmax(L_like)

    output_txt = []
    if k>0:
        topK = np.argsort(L_like)[::-1][:k]
        print(f"{models[correctID].name}")
        output_txt.append(f"{models[correctID].name}")
        for i in topK:
            print(f"{models[i].name}\t{L_like[i]}")
            output_txt.append(f"{models[i].name}\t{L_like[i]}")

    with open("a3_gmmLiks.txt", 'a') as file:
        for line in output_txt:
            file.write(f"{line}\n")

    return 1 if (bestModel == correctID) else 0


if __name__ == "__main__":

    trainThetas = []
    testMFCCs = []
    
    d = 13
    k = 0  # number of top speakers to display, <= 0 if none
    M = 8
    epsilon = 0
    maxIter = 20
    # train a model for each speaker, and reserve data for testing
    num_speaker = 32  #number should be >=32
    
    for subdir, dirs, files in os.walk(dataDir):
        for speaker in dirs[:num_speaker]:
            print(speaker)

            files = fnmatch.filter(os.listdir(os.path.join(dataDir, speaker)), "*npy")
            random.shuffle(files)

            testMFCC = np.load(os.path.join(dataDir, speaker, files.pop()))
            testMFCCs.append(testMFCC)

            X = np.empty((0, d))

            
            for file in files:
                myMFCC = np.load(os.path.join(dataDir, speaker, file))
                X = np.append(X, myMFCC, axis=0)
            
            trainThetas.append(train(speaker, X, M, epsilon, maxIter))
            

    # evaluate
    numCorrect = 0

    for i in range(0, len(testMFCCs)):
        numCorrect += test(testMFCCs[i], i, trainThetas, k)
    accuracy = 1.0 * numCorrect / len(testMFCCs)

    print(f"Accuracy = {accuracy}")

    # for testing uncomment/ the final test for gmmDiscussion

    # Ms = [1,2,3,5,10,20]
    # iters = [1,2,3,5,10,20]
    # lst_acc = []
    # lst_Ms = []
    # lst_iters = []
    # i =0 
    # for m in Ms:
    #     for iter in iters:
    #         trainThetas = []
    #         testMFCCs = []
    #         epsilon = 0.0
    #         d = 13
    #         k = 0
    #         for subdir, dirs, files in os.walk(dataDir):
    #             for id, speaker in enumerate(dirs):
    #                 files = fnmatch.filter(os.listdir(os.path.join(dataDir, speaker)), "*npy")
    #                 random.shuffle(files)

    #                 testMFCC = np.load(os.path.join(dataDir, speaker, files.pop()))
    #                 testMFCCs.append(testMFCC)

    #                 X = np.empty((0, d))

    #                 for file in files:
    #                     myMFCC = np.load(os.path.join(dataDir, speaker, file))
    #                     X = np.append(X, myMFCC, axis=0)

    #                 trainThetas.append(train(speaker, X, m, epsilon, iter))

    #         # evaluate
    #         numCorrect = 0
    #         for i in range(0, len(testMFCCs)):
    #             numCorrect += test(testMFCCs[i], i, trainThetas, k)
    #         accuracy = 1.0 * numCorrect / len(testMFCCs)
    #         lst_acc.append(accuracy) 
    #         lst_Ms.append(m)
    #         lst_iters.append(iter)
    #         print(m,iter)
    #         print(f"Accuracy = {accuracy}")

    # fig = go.Figure(data=[go.Scatter3d(x=lst_Ms, y=lst_iters, z=lst_acc,
    #                                mode='markers',
    #                                marker=dict(
    #                                    size=12,
    #                                    colorscale='Viridis',  # choose a colorscale
    #                                    opacity=0.8
    #                                ))])
    
    # fig.update_layout(title='M vs MaxIter vs Accuracy',
    #               scene=dict(
    #                   xaxis_title='M',
    #                   yaxis_title='MaxIter',
    #                   zaxis_title='Accuracy'
    #               ))

    # fig.show()